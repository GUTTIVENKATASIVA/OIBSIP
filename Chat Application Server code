import socket
import threading

def handle_client(client_socket, client_address, other_client_socket):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if not message:
                break
            print(f"Message from {client_address}: {message}")
            other_client_socket.send(message.encode('utf-8'))
        except ConnectionResetError:
            print(f"Connection with {client_address} was lost.")
            break

    client_socket.close()

def start_server():
    server_host = '127.0.0.1'
    server_port = 12345

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((server_host, server_port))
    server_socket.listen(2)  # Limit to 2 clients for a 2-person chat

    print(f"Server is listening on {server_host}:{server_port}...")

    # Accept two client connections
    client_socket_1, client_address_1 = server_socket.accept()
    print(f"Client 1 connected from {client_address_1}")

    client_socket_2, client_address_2 = server_socket.accept()
    print(f"Client 2 connected from {client_address_2}")

    # Create threads to handle each client
    thread_1 = threading.Thread(target=handle_client, args=(client_socket_1, client_address_1, client_socket_2))
    thread_2 = threading.Thread(target=handle_client, args=(client_socket_2, client_address_2, client_socket_1))

    # Start both threads
    thread_1.start()
    thread_2.start()

    # Wait for both threads to finish
    thread_1.join()
    thread_2.join()

    # Close the server socket after chat ends
    server_socket.close()

if __name__ == "__main__":
    start_server()
